rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
  
    // Helper function to check ownership/roles
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isCommunityFounder(communityId) {
      let communityDoc = get(/databases/$(database)/documents/communities/$(communityId));
      return request.auth.uid == communityDoc.data.founderUid;
    }

    // Default deny all reads and writes
    match /{allPaths=**} {
      allow read, write: if false;
    }
    
    // Allow public read on all image folders
    match /profile-pictures/{userId}/{fileName} {
      allow read: if true;
      // Allow write only if the user is uploading to their own folder
      allow write: if isOwner(userId);
    }
    
    match /community-logos/{communityId}/{fileName} {
      allow read: if true;
      // Allow write only if the user is the founder of the community
      allow write: if isCommunityFounder(communityId);
    }
    
    match /community-banners/{communityId}/{fileName} {
       allow read: if true;
       // Allow write only if the user is the founder of the community
       allow write: if isCommunityFounder(communityId);
    }
    
    match /event-banners/{eventId}/{fileName} {
      allow read: if true;
      // Allow any authenticated user to upload event banners.
      // Firestore rules will control who can create/update the event document itself.
      allow write: if request.auth != null;
    }

    match /deal-images/{dealId}/{fileName} {
        allow read: if true;
        allow write: if request.auth != null;
    }

  }
}

rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper function to check ownership of a community
    function isCommunityFounder(communityId) {
      return get(/databases/$(database)/documents/communities/$(communityId)).data.founderUid == request.auth.uid;
    }
    
    // Publicly readable, anyone can see images
    match /{allPaths=**} {
      allow read;
    }
    
    // Profile Pictures: Only the owner can write to their own folder
    match /profile-pictures/{userId}/{allPaths=**} {
      allow write: if request.auth.uid == userId;
    }
    
    // Community Logos: Only the community founder can write to their folder
    match /community-logos/{communityId}/{allPaths=**} {
      allow write: if isCommunityFounder(communityId);
    }
    
    // Community Banners: Only the community founder can write to their folder
    match /community-banners/{communityId}/{allPaths=**} {
       allow write: if isCommunityFounder(communityId);
    }
    
    // Event Banners: Any authenticated user can upload an event banner.
    // The Firestore rules will handle who can create/update the event itself.
    match /event-banners/{allPaths=**} {
      allow write: if request.auth != null;
    }
    
    // Deal Images: Any authenticated user can upload a deal image.
    // The Firestore rules will handle who can create/update the deal itself.
    match /deal-images/{allPaths=**} {
      allow write: if request.auth != null;
    }
  }
}

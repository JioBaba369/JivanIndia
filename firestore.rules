
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =====================================================================
    // Helper Functions
    // =====================================================================

    // Is the user authenticated?
    function isSignedIn() {
      return request.auth != null;
    }

    // Is the user the owner of the document?
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Is the user an admin?
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Does the incoming data have any fields that are not in the allowed set?
    function hasOnlyAllowedFields(allowedFields) {
      return request.resource.data.keys().hasOnly(allowedFields);
    }

    // =====================================================================
    // Collection: users
    // =====================================================================
    match /users/{userId} {
      // READ: Anyone can read public user profiles. A user can read their own document.
      allow read: if true;

      // CREATE: Allow user creation only via signup flow (not directly).
      // We check for minimal required fields during creation.
      allow create: if isSignedIn() && request.auth.uid == userId
                      && request.resource.data.name is string
                      && request.resource.data.email is string;

      // UPDATE: A user can update their own profile.
      // They CANNOT change their own isAdmin status.
      allow update: if isOwner(userId) && request.resource.data.isAdmin == resource.data.isAdmin;

      // DELETE: Not allowed for now to prevent data loss.
      allow delete: if false;
    }

    // =====================================================================
    // Collection: communities
    // =====================================================================
    match /communities/{communityId} {
      // READ: Anyone can read community pages.
      allow read: if true;

      // CREATE: Any signed-in user can create a community.
      // We enforce that the founderUid must match the user's UID.
      allow create: if isSignedIn() && request.resource.data.founderUid == request.auth.uid;

      // UPDATE: Only the founder or an admin can update.
      allow update: if isAdmin() || (isSignedIn() && get(/databases/$(database)/documents/communities/$(communityId)).data.founderUid == request.auth.uid);
      
      // DELETE: Only an admin can delete.
      allow delete: if isAdmin();
    }

    // =====================================================================
    // Collection: events
    // =====================================================================
    match /events/{eventId} {
      // READ: Anyone can read events.
      allow read: if true;
      
      // CREATE: Any signed-in user can create an event.
      // We enforce that the submittedByUid must match the user's UID.
      allow create: if isSignedIn() && request.resource.data.submittedByUid == request.auth.uid;
      
      // UPDATE: Admins can update any event (e.g., to change status).
      allow update: if isAdmin();
      
      // DELETE: Admins can delete events.
      allow delete: if isAdmin();
    }
    
    // =====================================================================
    // Collection: about
    // =====================================================================
    match /about/{documentId} {
        // READ: The 'about' page content should be public.
        allow read: if true;
        
        // WRITE: Only admins should be able to update the 'about' page content.
        allow write: if isAdmin();
    }
  }
}

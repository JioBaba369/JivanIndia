rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions for validating requests
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      // get() can't be used in helper functions in this context,
      // so we check the incoming resource directly.
      // This will be combined with checks on the existing resource in rules.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isCommunityFounder(communityId) {
      let community = get(/databases/$(database)/documents/communities/$(communityId)).data;
      return request.auth.uid == community.founderUid;
    }
    
    function isEventSubmitter(eventId) {
      let event = get(/databases/$(database)/documents/events/$(eventId)).data;
      return request.auth.uid == event.submittedByUid;
    }
    
    // Validate required fields are present and not empty for a new document
    function hasRequiredFields(requiredFields) {
      return requiredFields.size() == requiredFields.filter(field => field in request.resource.data && request.resource.data[field] != '').size();
    }
    
    // Check if there are any unexpected fields
    function hasOnlyAllowedFields(allowedFields) {
      return request.resource.data.keys().hasOnly(allowedFields);
    }
    

    // =====================================================================
    //  USERS Collection
    // =====================================================================
    match /users/{userId} {
      // ANYONE can read a user's public profile data
      allow read: if true;
      
      // ONLY the user themselves can update their own profile
      // CRITICAL: They cannot change their isAdmin status.
      allow update: if isOwner(userId) && request.resource.data.isAdmin == resource.data.isAdmin;

      // Users can only be created via the signup flow (see functions rules)
      allow create: if isOwner(userId);
      
      // No one can delete user documents from the client
      allow delete: if false;
    }

    // =====================================================================
    //  COMMUNITIES Collection
    // =====================================================================
    match /communities/{communityId} {
      // ANYONE can read community profiles
      allow read: if true;
      
      // ONLY authenticated users can create communities
      // Validation: Ensure required fields are present and correct types.
      allow create: if request.auth != null
                    && request.resource.data.founderUid == request.auth.uid
                    && request.resource.data.isVerified == false; // Must be unverified on creation
      
      // ONLY the founder or an admin can update a community
      // Validation: Ensure founder UID cannot be changed.
      allow update: if request.auth != null && (isCommunityFounder(communityId) || isAdmin())
                    && request.resource.data.founderUid == resource.data.founderUid;
      
      // ONLY an admin can delete a community (for safety)
      allow delete: if request.auth != null && isAdmin();
    }

    // =====================================================================
    //  EVENTS Collection
    // =====================================================================
    match /events/{eventId} {
      // ANYONE can read approved events
      allow read: if resource.data.status == 'Approved' || isEventSubmitter(eventId) || isAdmin();
      
      // ONLY authenticated users can create events
      allow create: if request.auth != null 
                    && request.resource.data.submittedByUid == request.auth.uid;
      
      // ONLY the event submitter or an admin can update an event
      allow update: if request.auth != null && (isEventSubmitter(eventId) || isAdmin());

      // ONLY the event submitter or an admin can delete an event
      allow delete: if request.auth != null && (isEventSubmitter(eventId) || isAdmin());
    }
    
    // =====================================================================
    //  ABOUT Collection
    // =====================================================================
    match /about/{docId} {
      // ANYONE can read the about page content
      allow read: if true;
      
      // ONLY an admin can update the about page
      allow update: if request.auth != null && isAdmin();
      
      // No one can create/delete the singleton about doc from client
      allow create, delete: if false;
    }
  }
}
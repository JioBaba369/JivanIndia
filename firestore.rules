
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      // Check if the user's UID is in the adminUids list of the singleton 'about' document
      return get(/databases/$(database)/documents/about/singleton).data.adminUids.has(request.auth.uid);
    }
    
    function isCommunityManager(communityId) {
        let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return user.affiliation.orgId == communityId;
    }

    // Public read, restricted write
    match /events/{eventId} {
      allow read: if true;
      allow create: if isSignedIn() && isCommunityManager(request.resource.data.organizerId);
      allow update: if isSignedIn() && (isAdmin() || isOwner(resource.data.submittedByUid));
      allow delete: if isSignedIn() && (isAdmin() || isOwner(resource.data.submittedByUid));
    }
    
    match /communities/{communityId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (isAdmin() || isOwner(resource.data.founderUid));
      allow delete: if isSignedIn() && (isAdmin() || isOwner(resource.data.founderUid));
    }
    
    match /businesses/{businessId} {
        allow read: if true;
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }
    
    match /sponsors/{sponsorId} {
        allow read: if true;
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }

    match /deals/{dealId} {
      allow read: if true;
      allow create: if isSignedIn() && isCommunityManager(request.resource.data.businessId);
      allow update: if isSignedIn() && (isAdmin() || isOwner(resource.data.submittedByUid));
      allow delete: if isSignedIn() && (isAdmin() || isOwner(resource.data.submittedByUid));
    }

    match /jobs/{jobId} {
        allow read: if true;
        allow create: if isSignedIn() && isCommunityManager(request.resource.data.companyId);
        allow update: if isSignedIn() && (isAdmin() || isOwner(resource.data.submittedByUid));
        allow delete: if isSignedIn() && (isAdmin() || isOwner(resource.data.submittedByUid));
    }

    match /movies/{movieId} {
      allow read: if true;
      // Movies are admin-created content
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    // User data is public read for profiles, but write is restricted
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    // Notifications are private to each user
    match /notifications/{notificationId} {
      allow read, update, delete: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn(); // Can be created by system/other users
    }
    
    // Reports are admin only
    match /reports/{reportId} {
      allow read, update, delete: if isSignedIn() && isAdmin();
      allow create: if isSignedIn();
    }
    
    match /contacts/{contactId} {
      allow read, update, delete: if isSignedIn() && isAdmin();
      allow create: if true;
    }
    
    // Singleton documents
    match /about/singleton {
        allow read: if true;
        allow update: if isSignedIn() && isAdmin();
        // Prevent creation/deletion of singleton
        allow create, delete: if false;
    }
  }
}

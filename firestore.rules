rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isCommunityFounder(communityId) {
      return get(/databases/$(database)/documents/communities/$(communityId)).data.founderUid == request.auth.uid;
    }

    // Allow public read on most collections
    match /{collection}/{docId} 
      where collection in ['events', 'communities', 'deals', 'movies', 'providers', 'sponsors', 'jobs', 'about'] {
      allow read: if true;
    }

    // Users can only read/write their own document
    match /users/{userId} {
      allow read: if true;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if false; // Generally, don't allow users to delete their own accounts
    }
    
    // Events can be created by authenticated users, but only updated/deleted by their creator or an admin
    match /events/{eventId} {
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && (resource.data.submittedByUid == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }
    
    // Communities can be created by any signed-in user.
    // Updates are restricted to the community's founder.
    match /communities/{communityId} {
        allow create: if isSignedIn();
        allow update: if isSignedIn() && isCommunityFounder(communityId);
        allow delete: if false; // Prevent accidental deletion
    }

    // Default deny all other requests
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

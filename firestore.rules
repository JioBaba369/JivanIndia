rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/about/singleton).data.adminUids.hasAny([request.auth.uid]);
    }
    
    function isCommunityFounder(communityId) {
      return isAuthenticated() && request.auth.uid == get(/databases/$(database)/documents/communities/$(communityId)).data.founderUid;
    }

    function isCommunityManager(communityId) {
        // A user is a manager if they are the founder OR their UID is in the managerUids list.
        return isAuthenticated() && (
            isCommunityFounder(communityId) || 
            request.auth.uid in get(/databases/$(database)/documents/communities/$(communityId)).data.managerUids
        );
    }
    
    function isAffiliatedWithCommunity(communityId) {
        return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.affiliation.orgId == communityId;
    }

    // User Profiles
    match /users/{userId} {
      allow read: if true;
      allow create: if isUser(userId);
      allow update: if isUser(userId) && !(request.resource.data.diff(resource.data).affectedKeys().hasAny(['roles', 'isAdmin', 'isCommunityManager']));
      allow delete: if isAdmin();
    }

    // Communities
    match /communities/{communityId} {
      allow read: if true;
      allow create: if isAuthenticated();
      // Allow founder, managers, or admin to update
      allow update: if isCommunityManager(communityId) || isAdmin();
      allow delete: if isCommunityFounder(communityId) || isAdmin();
    }

    // Events
    match /events/{eventId} {
      allow read: if true;
      allow create: if isAuthenticated() && isAffiliatedWithCommunity(request.resource.data.organizerId);
      allow update: if isAdmin() || isAffiliatedWithCommunity(resource.data.organizerId);
      allow delete: if isAdmin();
    }

    // Businesses, Deals, Jobs, Sponsors
    match /businesses/{businessId} {
      allow read: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    match /sponsors/{sponsorId} {
        allow read: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    match /deals/{dealId} {
      allow read: if true;
      allow create: if isAuthenticated() && isAffiliatedWithCommunity(request.resource.data.businessId);
      allow update: if isAdmin() || isAffiliatedWithCommunity(resource.data.businessId);
      allow delete: if isAdmin();
    }

    match /jobs/{jobId} {
      allow read: if true;
      allow create: if isAuthenticated() && isAffiliatedWithCommunity(request.resource.data.companyId);
      allow update: if isAdmin() || isAffiliatedWithCommunity(resource.data.companyId);
      allow delete: if isAdmin();
    }
    
    // Movies (Publicly managed for now)
    match /movies/{movieId} {
        allow read: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    // About Page (Singleton)
    match /about/singleton {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Reports (Write-only for users, read-only for admins)
    match /reports/{reportId} {
        allow read: if isAdmin();
        allow create: if isAuthenticated();
        allow update, delete: if isAdmin();
    }
    
    // Notifications (User-specific access)
    match /notifications/{notificationId} {
        allow read, update, delete: if isUser(resource.data.userId);
        allow create: if isAuthenticated(); // Can be created by server-side logic or functions
    }
    
    // Contacts (Write-only for users)
    match /contacts/{contactId} {
        allow read, update, delete: if isAdmin();
        allow create: if true;
    }
  }
}

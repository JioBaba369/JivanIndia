
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isCommunityFounder(communityId) {
      let community = get(/databases/$(database)/documents/communities/$(communityId)).data;
      return community.founderUid == request.auth.uid;
    }

    function isEventSubmitter(eventId) {
        let event = get(/databases/$(database)/documents/events/$(eventId)).data;
        return event.submittedByUid == request.auth.uid;
    }

    // Collection: users
    match /users/{userId} {
      allow read;
      allow create: if isSignedIn() && isOwner(userId);
      // Users can update their own profile, but cannot make themselves an admin.
      allow update: if (isOwner(userId) && request.resource.data.isAdmin == resource.data.isAdmin) || isAdmin();
    }

    // Collection: communities
    match /communities/{communityId} {
      allow read;
      allow create: if isSignedIn();
      allow update: if isCommunityFounder(communityId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Collection: events
    match /events/{eventId} {
      allow read;
      allow create: if isSignedIn();
      allow update: if isEventSubmitter(eventId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Collection: about
    match /about/singleton {
      allow read;
      allow write: if isAdmin();
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}


rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if the user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    // Communities collection rules
    match /communities/{communityId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(resource.data.founderUid) || isAdmin());
      allow delete: if isAuthenticated() && (isOwner(resource.data.founderUid) || isAdmin());
    }
    
    // Events collection rules
    match /events/{eventId} {
      allow read: if true;
      allow create: if isAuthenticated();
      // Only the event submitter or an admin can update/delete
      allow update, delete: if isAuthenticated() && (isOwner(resource.data.submittedByUid) || isAdmin());
    }
    
    // About page content rules
    match /about/singleton {
    	allow read: if true;
      allow write: if isAuthenticated() && isAdmin();
    }
  }
}

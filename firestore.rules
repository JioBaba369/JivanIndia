rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/about/singleton).data.adminUids.hasAny([userId]);
    }
    
    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Users collection
    match /users/{userId} {
      // Anyone can read a user's public profile
      allow get: if true;
      // Users can only create their own profile
      allow create: if isOwner(userId);
      // Users can only update their own profile
      allow update: if isOwner(userId);
      // No one can delete a user document through the client
      allow delete: if false;
    }

    // About collection (singleton document)
    match /about/singleton {
      // Anyone can read the about page content
      allow get: if true;
      // Only admins can update the about page
      allow update: if isAuthenticated() && isAdmin(request.auth.uid);
    }
    
    // Publicly readable collections
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAuthenticated();
      // Only the user who submitted the event or an admin can update it
      allow update: if isAuthenticated() && (isAdmin(request.auth.uid) || resource.data.submittedByUid == request.auth.uid);
    }
    
    match /communities/{communityId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAuthenticated();
      // Only the founder of the community or an admin can update/delete
      allow update, delete: if isAuthenticated() && (isAdmin(request.auth.uid) || resource.data.founderUid == request.auth.uid);
    }
    
    match /deals/{dealId} {
        allow get: if true;
        allow list: if true;
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && (isAdmin(request.auth.uid) || resource.data.submittedByUid == request.auth.uid);
    }
    
    match /movies/{movieId} {
        allow get: if true;
        allow list: if true;
        // Movies are read-only from the client
        allow create, update, delete: if false;
    }
    
     match /businesses/{businessId} {
        allow get: if true;
        allow list: if true;
        allow create: if isAuthenticated() && isAdmin(request.auth.uid);
        allow update: if isAuthenticated() && isAdmin(request.auth.uid);
    }
    
    match /sponsors/{sponsorId} {
        allow get: if true;
        allow list: if true;
        allow create: if isAuthenticated() && isAdmin(request.auth.uid);
        allow update: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    match /jobs/{jobId} {
        allow get: if true;
        allow list: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && (isAdmin(request.auth.uid) || resource.data.submittedByUid == request.auth.uid);
    }
    
    match /contacts/{contactId} {
        allow create: if true;
        allow read, update, delete: if isAuthenticated() && isAdmin(request.auth.uid);
    }
  }
}

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/about/singleton).data.adminUids.hasAny([request.auth.uid]);
    }
    
    function isCommunityManager(communityId) {
        let community = get(/databases/$(database)/documents/communities/$(communityId)).data;
        return request.auth.uid == community.founderUid || (community.managers != null && community.managers.exists(m, m.uid == request.auth.uid));
    }
    
    function getRole(communityId, userId) {
      let community = get(/databases/$(database)/documents/communities/$(communityId)).data;
      if (request.auth.uid == community.founderUid) {
        return 'admin';
      }
      if (community.managers != null) {
        let manager = community.managers.filter(m, m.uid == userId);
        if (manager.size() > 0) {
            return manager[0].role;
        }
      }
      return 'none';
    }

    // Default: Deny all reads/writes unless explicitly allowed
    match /{document=**} {
      allow read, write: if false;
    }

    // Static content is readable by all
    match /about/singleton {
      allow read: if true;
      allow write: if isAdmin(); 
    }
    match /countries/{docId} {
      allow read: if true;
    }
    match /india_locations/{docId} {
      allow read: if true;
    }

    // Users
    match /users/{userId} {
      allow read: if true; 
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && request.resource.data.keys().hasOnly(['name', 'username', 'bio', 'profileImageUrl', 'phone', 'website', 'currentLocation', 'originLocation', 'languagesSpoken', 'interests', 'savedEvents', 'joinedCommunities', 'savedDeals', 'savedBusinesses', 'savedMovies', 'notificationPreferences', 'calendarSyncEnabled']);
    }

    // Communities
    match /communities/{communityId} {
      allow read: if true;
      allow create: if isAuth() && request.resource.data.founderUid == request.auth.uid;
      allow update: if isAuth() && (isAdmin() || isCommunityManager(communityId));
      allow delete: if isAuth() && (isAdmin() || isOwner(get(/databases/$(database)/documents/communities/$(communityId)).data.founderUid));
    }

    // Events
    match /events/{eventId} {
      allow read: if resource.data.status == 'Approved' || (isAuth() && (isAdmin() || isCommunityManager(resource.data.organizerId)));
      allow create: if isAuth() && isCommunityManager(request.resource.data.organizerId);
      allow update: if isAuth() && (isAdmin() || isCommunityManager(resource.data.organizerId));
      allow delete: if isAuth() && (isAdmin() || isCommunityManager(resource.data.organizerId));
    }

    // Reports: Users can create, Admins can read/update
    match /reports/{reportId} {
        allow create: if isAuth() && request.resource.data.reportedByUid == request.auth.uid;
        allow read, update: if isAuth() && isAdmin();
    }

    // Deals, Jobs, Sponsors, Movies: Affiliated users can create, Admins can manage
    match /deals/{dealId} {
        allow read: if true;
        allow create: if isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.affiliation != null;
        allow update, delete: if isAuth() && (isAdmin() || isOwner(resource.data.submittedByUid));
    }
    
    match /jobs/{jobId} {
        allow read: if true;
        allow create: if isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.affiliation != null;
        allow update, delete: if isAuth() && isAdmin();
    }

    match /sponsors/{sponsorId} {
        allow read: if true;
        allow create, update, delete: if isAuth() && isAdmin();
    }
    
    match /movies/{movieId} {
        allow read: if true;
        allow create, update, delete: if isAuth() && isAdmin();
    }

    // Notifications: Read/write by the owner only
    match /notifications/{notificationId} {
        allow read, write: if isAuth() && isOwner(resource.data.userId);
    }
    
    // Contact submissions: Write only
    match /contacts/{contactId} {
        allow create: if true;
    }
  }
}

rules_version = '2';

// Helper function to check if a user is an admin
function isAdmin() {
  return get(/databases/$(database)/documents/about/singleton).data.adminUids.has(request.auth.uid);
}

// Helper function to check if the user is the owner of a document
function isOwner(userId) {
    return request.auth.uid == userId;
}

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all access
    match /{document=**} {
      allow read, write: if false;
    }

    // Users Collection
    match /users/{userId} {
      // Anyone can read a user's public profile
      allow get: if true;
      // Users can only create their own profile
      allow create: if isOwner(userId);
      // Users can only update their own profile
      allow update: if isOwner(userId);
    }
    
    // About Collection (for admin list)
    match /about/singleton {
        // Publicly readable for admin checks on the client
        allow get: if true;
        // Only admins can modify the about page content
        allow update: if isAdmin();
    }

    // Communities Collection
    match /communities/{communityId} {
      allow get: if true;
      allow list: if true;
      // Only authenticated users can create a community
      allow create: if request.auth != null;
      // Only the founder or an admin can update
      allow update: if isOwner(resource.data.founderUid) || isAdmin();
      // Only the founder or an admin can delete
      allow delete: if isOwner(resource.data.founderUid) || isAdmin();
    }
    
    // Events Collection
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      // Authenticated users with an affiliation can create events
      allow create: if request.auth != null && request.resource.data.organizerId != null;
       // Admins can approve/archive, creators can edit their own drafts.
      allow update: if isAdmin() || (isOwner(request.resource.data.submittedByUid) && resource.data.status == 'Pending');
    }
    
    // Other Publicly Readable Collections
    match /businesses/{businessId} {
      allow get: if true;
      allow list: if true;
       // Only admins can add/update businesses to ensure they are vetted
      allow create, update: if isAdmin();
    }
    
    match /sponsors/{sponsorId} {
      allow get: if true;
      allow list: if true;
       // Only admins can add/update sponsors
      allow create, update: if isAdmin();
    }

    match /deals/{dealId} {
        allow get: if true;
        allow list: if true;
        // Authenticated users with affiliation can create deals
        allow create: if request.auth != null && request.resource.data.businessId != null;
    }
    
    match /movies/{movieId} {
        allow get: if true;
        allow list: if true;
    }
    
    match /jobs/{jobId} {
        allow get: if true;
        allow list: if true;
        // Authenticated users with affiliation can create jobs
        allow create: if request.auth != null && request.resource.data.companyId != null;
    }
    
    // Contact form submissions
    match /contacts/{contactId} {
      allow create: if true; // Anyone can send a message
      allow read, update, delete: if false; // No one can read/modify submissions
    }
  }
}
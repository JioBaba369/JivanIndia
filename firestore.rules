rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      // Check for custom claim `admin`.
      // Make sure to set this claim via the Firebase Admin SDK.
      return isAuthenticated() && request.auth.token.admin == true;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isCommunityFounder(communityId) {
       return isAuthenticated() && get(/databases/$(database)/documents/communities/$(communityId)).data.founderUid == request.auth.uid;
    }

    function isCommunityManager(communityId) {
      // A user is a manager if they are the founder OR their UID is in the managerUids array.
      // Note: `in` operator on a list is what you use here, not .map().
      return isAuthenticated() && (
        isCommunityFounder(communityId) ||
        request.auth.uid in get(/databases/$(database)/documents/communities/$(communityId)).data.managerUids
      );
    }

    function isEventSubmitter(eventId) {
       return isAuthenticated() && get(/databases/$(database)/documents/events/$(eventId)).data.submittedByUid == request.auth.uid;
    }

    function isAffiliatedWithCommunity(communityId) {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.affiliation.orgId == communityId;
    }

    // Collection Rules
    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated() && isOwner(userId);
      // Don't allow users to edit their own roles or affiliation directly.
      // Affiliation is set server-side when a community is created.
      allow update: if isOwner(userId) && !("roles" in request.resource.data) && !("affiliation" in request.resource.data);
    }
    
    match /communities/{communityId} {
      allow read: if true;
      
      // Allow any logged-in user to create a community
      allow create: if isAuthenticated();

      // Allow founder, managers, or admin to update
      allow update: if isCommunityManager(communityId) || isAdmin();
      
      // Allow founder or an admin to delete
      allow delete: if isCommunityFounder(communityId) || isAdmin();
    }
    
    match /events/{eventId} {
      allow read: if true;
      allow create: if isAuthenticated() && isAffiliatedWithCommunity(request.resource.data.organizerId);
      // Allow original submitter or community manager/founder or Admin to update/delete
      allow update, delete: if isEventSubmitter(eventId) || isCommunityManager(resource.data.organizerId) || isAdmin();
    }

    match /about/singleton {
        allow read: if true;
        // Only admins can update the 'About' page content
        allow write: if isAdmin();
    }
    
    match /businesses/{businessId} {
        allow read: if true;
        allow create: if isAuthenticated() && isAffiliatedWithCommunity(request.resource.data.associatedCommunityId);
        allow update, delete: if isCommunityManager(resource.data.associatedCommunityId) || isAdmin();
    }

    match /sponsors/{sponsorId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }

    match /deals/{dealId} {
        allow read: if true;
        allow create: if isAuthenticated() && isAffiliatedWithCommunity(request.resource.data.businessId);
        allow update, delete: if isCommunityManager(resource.data.businessId) || isAdmin();
    }
    
    match /jobs/{jobId} {
        allow read: if true;
        allow create: if isAuthenticated() && isAffiliatedWithCommunity(request.resource.data.companyId);
        allow update, delete: if isCommunityManager(resource.data.companyId) || isAdmin();
    }
    
    match /movies/{movieId} {
        allow read: if true;
        // Only admins can manage movie listings
        allow create, update, delete: if isAdmin();
    }
    
    match /reports/{reportId} {
        // Users can only create reports
        allow create: if isAuthenticated();
        // Admins can read, update (status), and delete reports
        allow read, update, delete: if isAdmin();
    }
    
    match /notifications/{notificationId} {
      // A user can only access their own notifications
      allow read, update, delete: if isOwner(resource.data.userId);
      // Creation is handled server-side via batch writes.
      allow create: if false;
    }
    
    match /contacts/{contactId} {
      // Any user can submit a contact form
      allow create: if true;
      // Only admins can read contact submissions
      allow read, update, delete: if isAdmin();
    }
  }
}

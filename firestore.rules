
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Deny all reads and writes by default
    match /{document=**} {
      allow read, write: if false;
    }

    //------------------------------------------------------------
    //  User Profiles (users)
    //------------------------------------------------------------
    match /users/{userId} {
      // ANYONE can read the public profile fields
      allow get: if true;
      allow list: if request.auth != null;

      // ONLY the authenticated user can read their full document
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // A user can only create THEIR OWN profile document
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // A user can only update THEIR OWN profile
      // The `roles` field cannot be changed by the user.
      allow update: if request.auth != null && request.auth.uid == userId
                    && !('roles' in request.resource.data);
    }
    
    //------------------------------------------------------------
    //  About Page & Admin Management (about)
    //------------------------------------------------------------
    match /about/{docId} {
      // ANYONE can read the about page content
      allow get: if true;
      
      // ONLY an admin can write to the about page content.
      // An admin is defined as a user whose UID is in the 'adminUids' list
      // in the document *before* the change. For the initial document, this
      // must be seeded manually in Firestore.
      allow write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/about/singleton).data.adminUids;
    }

    //------------------------------------------------------------
    //  Communities
    //------------------------------------------------------------
    match /communities/{communityId} {
      allow read: if true;
      
      // Any authenticated user can create a community
      allow create: if request.auth != null && request.resource.data.founderUid == request.auth.uid;
      
      // Update allowed if user is founder, manager, or platform admin
      allow update: if request.auth != null && (
                      (resource.data.founderUid == request.auth.uid) ||
                      (resource.data.managers.exists(m, m.uid == request.auth.uid)) ||
                      (request.auth.uid in get(/databases/$(database)/documents/about/singleton).data.adminUids)
                    );
                    
      // Delete allowed ONLY for founder or platform admin
      allow delete: if request.auth != null && (
                      (resource.data.founderUid == request.auth.uid) ||
                      (request.auth.uid in get(/databases/$(database)/documents/about/singleton).data.adminUids)
                    );
    }

    //------------------------------------------------------------
    //  Events
    //------------------------------------------------------------
    match /events/{eventId} {
      allow read: if true;

      // Allow create if user is authenticated and affiliated with an org
      allow create: if request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.affiliation.orgId == request.resource.data.organizerId;
      
      // Allow update if user is the original submitter, a manager of the community, or a platform admin
      allow update: if request.auth != null && (
                      (resource.data.submittedByUid == request.auth.uid) ||
                      (get(/databases/$(database)/documents/communities/$(resource.data.organizerId)).data.founderUid == request.auth.uid) ||
                      (get(/databases/$(database)/documents/communities/$(resource.data.organizerId)).data.managers.exists(m, m.uid == request.auth.uid)) ||
                      (request.auth.uid in get(/databases/$(database)/documents/about/singleton).data.adminUids)
                    );
                    
      // Allow delete if user is a manager of the community or a platform admin
      allow delete: if request.auth != null && (
                      (get(/databases/$(database)/documents/communities/$(resource.data.organizerId)).data.founderUid == request.auth.uid) ||
                      (get(/databases/$(database)/documents/communities/$(resource.data.organizerId)).data.managers.exists(m, m.uid == request.auth.uid)) ||
                      (request.auth.uid in get(/databases/$(database)/documents/about/singleton).data.adminUids)
                    );
    }

    //------------------------------------------------------------
    //  Businesses
    //------------------------------------------------------------
    match /businesses/{businessId} {
        allow read: if true;
        // Allow create if user is authenticated
        allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
        // Allow update if user is owner or platform admin
        allow update: if request.auth != null && (
                        (resource.data.ownerId == request.auth.uid) ||
                        (request.auth.uid in get(/databases/$(database)/documents/about/singleton).data.adminUids)
                      );
        // Allow delete if user is owner or platform admin
        allow delete: if request.auth != null && (
                        (resource.data.ownerId == request.auth.uid) ||
                        (request.auth.uid in get(/databases/$(database)/documents/about/singleton).data.adminUids)
                      );
    }

    //------------------------------------------------------------
    //  Deals
    //------------------------------------------------------------
     match /deals/{dealId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.submittedByUid == request.auth.uid;
      // You can expand update/delete rules later if needed
    }

    //------------------------------------------------------------
    //  Movies
    //------------------------------------------------------------
    match /movies/{movieId} {
      allow read: if true;
      // Only admins can create/update/delete movies
      allow write: if request.auth != null && (request.auth.uid in get(/databases/$(database)/documents/about/singleton).data.adminUids);
    }
    
    //------------------------------------------------------------
    //  Jobs
    //------------------------------------------------------------
    match /jobs/{jobId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.submittedByUid == request.auth.uid;
    }

    //------------------------------------------------------------
    //  Sponsors
    //------------------------------------------------------------
    match /sponsors/{sponsorId} {
      allow read: if true;
      // Only admins can write to sponsors
      allow write: if request.auth != null && (request.auth.uid in get(/databases/$(database)/documents/about/singleton).data.adminUids);
    }
    
    //------------------------------------------------------------
    //  Reports
    //------------------------------------------------------------
    match /reports/{reportId} {
      // Any authenticated user can create a report
      allow create: if request.auth != null && request.resource.data.reportedByUid == request.auth.uid;
      
      // Only admins can read or update (e.g., change status) reports
      allow read, update: if request.auth != null && (request.auth.uid in get(/databases/$(database)/documents/about/singleton).data.adminUids);
    }
    
    //------------------------------------------------------------
    //  Notifications
    //------------------------------------------------------------
    match /notifications/{notificationId} {
      // A user can only access their own notifications
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      // Notifications are created server-side, so no client-create rule is needed.
    }
    
    //------------------------------------------------------------
    //  Contact Submissions
    //------------------------------------------------------------
    match /contacts/{contactId} {
        // Allow anyone to create a contact message
        allow create: if true;
    }
    
  }
}

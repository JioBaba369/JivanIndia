
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Users: Allow public read, but only the user can write their own document.
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth.uid == userId;
    }

    // Communities, Events, About: Allow public read.
    // Write access is managed through application logic (backend/admin roles).
    // For this app, we assume admin actions handle writes, so we can be broad here for now.
    // In a production app, you might add more specific roles/permissions.
    match /communities/{communityId} {
      allow read: if true;
      allow create: if request.auth != null; // Any logged-in user can create
      allow update: if request.auth.uid == resource.data.founderUid; // Only founder can update
    }
    
    match /events/{eventId} {
      allow read: if true;
      allow create: if request.auth != null; // Any logged-in user can create
      allow update: if request.auth.uid == resource.data.submittedByUid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true; // Submitter or admin
    }

    match /about/singleton {
      allow read: if true;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true; // Only admin
    }
  }
}

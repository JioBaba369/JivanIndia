
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin() {
      return get(/databases/$(database)/documents/about/singleton).data.adminUids.has(request.auth.uid);
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isCommunityManager(communityId) {
        let community = get(/databases/$(database)/documents/communities/$(communityId)).data;
        return request.auth.uid == community.founderUid || community.managers.hasAny([request.auth.uid]);
    }
    
    // PUBLIC: Anyone can read these collections
    match /{collection}/{docId} 
    where collection in ['festivals', 'sponsors', 'movies'] {
       allow read: if true;
       allow write: if isAdmin();
    }
    
    match /about/singleton {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // AUTHENTICATED READ, ADMIN WRITE
     match /{collection}/{docId} 
     where collection in ['deals', 'jobs', 'businesses', 'communities', 'events'] {
       allow write: if isAdmin();
     }
     
     match /events/{eventId} {
       allow read: if resource.data.status == 'Approved';
       allow create: if isCommunityManager(request.resource.data.organizerId);
       allow update: if isCommunityManager(resource.data.organizerId) || isAdmin();
       allow delete: if isAdmin();
     }
     
     match /communities/{communityId} {
        allow read: if resource.data.isVerified == true;
        allow create: if isOwner(request.resource.data.founderUid);
        allow update: if isCommunityManager(communityId) || isAdmin();
        allow delete: if isOwner(resource.data.founderUid) || isAdmin();
     }
     
     match /businesses/{businessId} {
        allow read: if resource.data.isVerified == true;
        allow create: if request.auth != null; // Any authenticated user can create
        allow update: if isOwner(resource.data.ownerId) || isAdmin();
        allow delete: if isOwner(resource.data.ownerId) || isAdmin();
     }
     
     match /deals/{dealId} {
        allow read: if true;
        allow create: if isCommunityManager(request.resource.data.communityId) || isOwner(getAfter(/databases/$(database)/documents/businesses/$(request.resource.data.businessId)).data.ownerId);
        allow update, delete: if isAdmin();
     }
     
     match /jobs/{jobId} {
        allow read: if true;
        allow create: if isCommunityManager(request.resource.data.companyId);
        allow update, delete: if isAdmin();
     }

    // USER-SPECIFIC
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
    }
    
    match /reports/{reportId} {
        allow create: if request.auth != null; // Any authenticated user can report
        allow read, update, delete: if isAdmin();
    }
    
     match /notifications/{notificationId} {
        allow read, update: if isOwner(resource.data.userId);
        allow create, delete: if isAdmin();
    }
    
    match /contacts/{contactId} {
        allow create: if true;
        allow read, update, delete: if isAdmin();
    }
    
  }
}

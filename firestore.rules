
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isCommunityFounder(communityId) {
      let community = get(/databases/$(database)/documents/communities/$(communityId)).data;
      return community.founderUid == request.auth.uid;
    }
    
    function isEventSubmitter(eventId) {
      let event = get(/databases/$(database)/documents/events/$(eventId)).data;
      return event.submittedByUid == request.auth.uid;
    }

    // =================================
    // Collections
    // =================================

    // Users Collection
    // Users can read public profiles.
    // Users can create their own profile on signup.
    // Users can only update their own profile, and cannot make themselves an admin.
    match /users/{userId} {
      allow read;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && request.resource.data.isAdmin == resource.data.isAdmin;
      allow delete: if isAdmin(); // Only admins can delete user accounts
    }
    
    // About Collection
    // Publicly readable. Only admins can write.
    match /about/{docId} {
      allow read;
      allow write: if isAdmin();
    }

    // Communities Collection
    // Publicly readable.
    // Authenticated users can create new communities.
    // Only founders or admins can update.
    match /communities/{communityId} {
      allow read;
      allow create: if request.auth != null && request.resource.data.founderUid == request.auth.uid;
      allow update: if isAdmin() || isCommunityFounder(communityId);
      allow delete: if isAdmin() || isCommunityFounder(communityId);
    }
    
    // Events Collection
    // Publicly readable.
    // Authenticated users can create new events.
    // Only submitters or admins can update.
    match /events/{eventId} {
        allow read;
        allow create: if request.auth != null && request.resource.data.submittedByUid == request.auth.uid;
        allow update: if isAdmin() || isEventSubmitter(eventId);
        allow delete: if isAdmin() || isEventSubmitter(eventId);
    }
  }
}

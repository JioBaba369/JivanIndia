
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin() {
      return isSignedIn() && 'admin' in getUserData(request.auth.uid).roles;
    }

    function isCommunityManager() {
        return isSignedIn() && 'community-manager' in getUserData(request.auth.uid).roles;
    }

    function isAffiliatedWith(orgId) {
      let affiliation = getUserData(request.auth.uid).get('affiliation', null);
      return affiliation != null && affiliation.orgId == orgId;
    }

    // Rules for each collection
    match /users/{userId} {
      allow read;
      allow create: if isUser(userId) && request.resource.data.uid == userId;
      allow update: if isUser(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    match /about/singleton {
      allow read;
      allow update: if isAdmin();
    }
    
    match /communities/{communityId} {
      allow read;
      allow create: if isCommunityManager() && isAffiliatedWith(request.resource.data.id);
      allow update: if isAdmin() || (isCommunityManager() && isAffiliatedWith(resource.data.id) && isAffiliatedWith(request.resource.data.id));
      allow delete: if isAdmin() || (isCommunityManager() && isAffiliatedWith(resource.data.id));
    }

    match /events/{eventId} {
      allow read: if resource.data.status == 'Approved' || isAdmin() || (isCommunityManager() && isAffiliatedWith(resource.data.organizerId));
      allow create: if isCommunityManager() 
                      && isAffiliatedWith(request.resource.data.organizerId)
                      && request.resource.data.status == 'Pending';
      allow update: if isAdmin() || 
                      (isCommunityManager() 
                        && isAffiliatedWith(resource.data.organizerId) 
                        && isAffiliatedWith(request.resource.data.organizerId)
                        && (request.resource.data.status == resource.data.status || request.resource.data.status == 'Pending')); 
      allow delete: if isAdmin() || (isCommunityManager() && isAffiliatedWith(resource.data.organizerId));
    }

    match /deals/{dealId} {
      allow read;
      allow create: if isCommunityManager() && isAffiliatedWith(request.resource.data.businessId);
      allow update: if isAdmin() || (isCommunityManager() && isAffiliatedWith(resource.data.businessId) && isAffiliatedWith(request.resource.data.businessId));
      allow delete: if isAdmin() || (isCommunityManager() && isAffiliatedWith(resource.data.businessId));
    }
    
    match /jobs/{jobId} {
      allow read;
      allow create: if isCommunityManager() && isAffiliatedWith(request.resource.data.companyId);
      allow update, delete: if isAdmin() || (isCommunityManager() && isAffiliatedWith(resource.data.companyId));
    }
    
    match /businesses/{businessId} {
        allow read;
        allow create: if isAdmin();
        allow update, delete: if isAdmin();
    }
    
    match /sponsors/{sponsorId} {
        allow read;
        allow create, update, delete: if isAdmin();
    }
    
    match /movies/{movieId} {
        allow read;
        allow create, update, delete: if isAdmin();
    }
    
    match /festivals/{festivalId} {
        allow read;
        allow create, update, delete: if isAdmin();
    }

    match /reports/{reportId} {
      allow read: if isAdmin();
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /contacts/{contactId} {
      allow read, update, delete: if isAdmin();
      allow create: if isSignedIn();
    }

    match /notifications/{notificationId} {
      allow read, write: if isUser(resource.data.userId);
    }
    
    match /{path=**}/notifications/{notificationId} {
      allow read, write: if isUser(get(path).data.userId);
    }
  }
}

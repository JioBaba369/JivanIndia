
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUser(uid) {
      return isUserAuthenticated() && request.auth.uid == uid;
    }

    function isAdmin() {
      // Admins are defined in the /about/singleton document
      return isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/about/singleton).data.adminUids;
    }
    
    function isCommunityManager(communityId) {
       return isUserAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.affiliation.orgId == communityId;
    }

    // Public collections: anyone can read.
    match /events/{eventId} {
      allow read: if true;
      allow create: if isUserAuthenticated() && request.resource.data.organizerId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.affiliation.orgId;
      allow update, delete: if isAdmin() || isCommunityManager(resource.data.organizerId);
    }
    
    match /communities/{communityId} {
      allow read: if true;
      allow create: if isUserAuthenticated() && request.resource.data.founderUid == request.auth.uid;
      allow update: if isUserAuthenticated() && (resource.data.founderUid == request.auth.uid || isAdmin());
      allow delete: if isAdmin() || (isUserAuthenticated() && resource.data.founderUid == request.auth.uid);
    }

    match /users/{userId} {
        allow read: if true;
        allow create: if isUser(userId);
        allow update: if isUser(userId) || isAdmin();
    }
    
    match /businesses/{businessId} {
      allow read: if true;
      allow create: if isAdmin();
      allow update, delete: if isAdmin();
    }
    
    match /sponsors/{sponsorId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }

    match /deals/{dealId} {
      allow read: if true;
      allow create: if isUserAuthenticated() && request.resource.data.businessId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.affiliation.orgId;
      allow update, delete: if isAdmin() || isCommunityManager(resource.data.businessId);
    }
    
    match /movies/{movieId} {
        allow read: if true;
        // Movies are generally managed by admins
        allow create, update, delete: if isAdmin();
    }
    
    match /jobs/{jobId} {
        allow read: if true;
        allow create: if isUserAuthenticated();
        allow update, delete: if isUser(resource.data.submittedByUid) || isAdmin();
    }
    
    // Notifications: Read-only for the user they belong to
    match /notifications/{notificationId} {
      allow read: if isUser(resource.data.userId);
      allow create: if isUserAuthenticated(); // Can be created by server functions or specific user actions
      allow update: if isUser(resource.data.userId); // User can mark as read
      allow delete: if false; // Notifications are generally not deleted by users
    }
    
    // Reports: Write-only for users, read/update for admins
    match /reports/{reportId} {
      allow read, update, delete: if isAdmin();
      allow create: if isUserAuthenticated();
    }
    
    // Contact submissions: Write-only for anyone, read for admins
    match /contacts/{contactId} {
        allow read, delete: if isAdmin();
        allow create: if true;
    }

    // Site configuration: Read for everyone, write only for admins
    match /about/singleton {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =============================================================
    // Helper Functions
    // =============================================================
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    function isAdmin(userId) {
      return isAuth() && get(/databases/$(database)/documents/about/singleton).data.adminUids.hasAny([userId]);
    }
    
    function isCommunityManager(communityId, userId) {
        let community = get(/databases/$(database)/documents/communities/$(communityId)).data;
        return isAuth() && (userId == community.founderUid || community.managers.exists(m => m.uid == userId));
    }
    
    // =============================================================
    // Collection Rules
    // =============================================================
    
    match /about/singleton {
        allow read: if true;
        allow write: if isAdmin(request.auth.uid);
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if isAuth();
      allow update: if isUser(userId) || isAdmin(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }
    
    match /events/{eventId} {
      allow read: if resource.data.status == 'Approved';
      allow create: if isAuth() && isCommunityManager(request.resource.data.organizerId, request.auth.uid);
      allow update: if isAuth() && (isCommunityManager(resource.data.organizerId, request.auth.uid) || isAdmin(request.auth.uid));
      allow delete: if isAuth() && (isCommunityManager(resource.data.organizerId, request.auth.uid) || isAdmin(request.auth.uid));
    }
    
    match /communities/{communityId} {
        allow read: if true;
        allow create: if isAuth() && request.auth.uid == request.resource.data.founderUid;
        allow update: if isAuth() && (isCommunityManager(communityId, request.auth.uid) || isAdmin(request.auth.uid));
        allow delete: if isAuth() && (resource.data.founderUid == request.auth.uid || isAdmin(request.auth.uid));
    }

    match /businesses/{businessId} {
      allow read: if resource.data.isVerified == true || isAdmin(request.auth.uid);
      allow create: if isAuth();
      allow update: if isAuth() && (isUser(resource.data.ownerId) || isAdmin(request.auth.uid));
      allow delete: if isAuth() && (isUser(resource.data.ownerId) || isAdmin(request.auth.uid));
    }

    match /deals/{dealId} {
      allow read: if true;
      allow create: if isAuth();
      allow update, delete: if isAuth() && (isUser(resource.data.submittedByUid) || isAdmin(request.auth.uid));
    }
    
    match /movies/{movieId} {
      allow read: if true;
      allow create, update, delete: if isAdmin(request.auth.uid);
    }

    match /jobs/{jobId} {
      allow read: if true;
      allow create, update, delete: if isAuth() && (isUser(resource.data.submittedByUid) || isAdmin(request.auth.uid));
    }
    
    match /sponsors/{sponsorId} {
        allow read: if true;
        allow create, update, delete: if isAdmin(request.auth.uid);
    }

    match /reports/{reportId} {
      allow read, update: if isAdmin(request.auth.uid);
      allow create: if isAuth();
    }
    
    match /contacts/{contactId} {
        allow create: if true;
        allow read, update, delete: if isAdmin(request.auth.uid);
    }

    match /notifications/{notificationId} {
        allow read, update: if isUser(resource.data.userId);
        allow create: if isAuth(); // Can be created by functions or system
        allow delete: if isUser(resource.data.userId);
    }
  }
}

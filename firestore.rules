
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Correctly checks if the user document's 'roles' array contains 'admin'
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['admin']);
    }

    // Correctly checks if the user document's 'roles' array contains 'community-manager'
    function isCommunityManager() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['community-manager']);
    }
    
    // Correctly checks if the authenticated user's affiliation matches the communityId
    function isAffiliatedWith(communityId) {
      let userAffiliation = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.affiliation;
      return userAffiliation != null && userAffiliation.orgId == communityId;
    }

    // Public User Profiles: Allow public read, but only owner or admin can write.
    match /users/{userId} {
      allow read: if true;
      allow write: if isOwner(userId) || isAdmin();
    }

    // Communities: Public read. Create requires sign-in. Update requires affiliation or admin.
    match /communities/{communityId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if isAffiliatedWith(communityId) || isAdmin();
    }

    // Events: Public read for approved events. Admins/Managers can read all their events.
    // Create for affiliated managers. Update/delete for admin or affiliated manager.
    match /events/{eventId} {
      allow read: if resource.data.status == 'Approved' || isAdmin() || (isCommunityManager() && isAffiliatedWith(resource.data.organizerId));
      allow create: if isSignedIn() && isCommunityManager();
      allow update, delete: if isAdmin() || (isCommunityManager() && isAffiliatedWith(resource.data.organizerId));
    }
    
    // Deals: Public read. Create for affiliated managers. Update/delete for admin or affiliated manager.
    match /deals/{dealId} {
        allow read: if true;
        allow create: if isSignedIn() && isCommunityManager();
        allow update, delete: if isAdmin() || (isCommunityManager() && isAffiliatedWith(resource.data.businessId));
    }
    
    // Businesses: Public read. Create/update/delete for admin only.
    match /businesses/{businessId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // Sponsors: Public read. Create/update/delete for admin only.
    match /sponsors/{sponsorId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Jobs: Public read. Create for affiliated managers. Update/delete for admin.
    match /jobs/{jobId} {
        allow read: if true;
        allow create: if isSignedIn() && isCommunityManager();
        allow update, delete: if isAdmin();
    }
    
    // Movies: Public read. Admin write only.
    match /movies/{movieId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Reports: Admin only for read/update/delete. Create for any signed-in user.
    match /reports/{reportId} {
        allow read, update, delete: if isAdmin();
        allow create: if isSignedIn();
    }
    
    // Notifications: Only owner can access.
    match /notifications/{notificationId} {
        allow read, write, create: if isOwner(resource.data.userId);
    }
    
     // Collection Group for Notifications on user's dashboard (no change needed here)
    match /{path=**}/notifications/{notificationId} {
       allow read, write: if isOwner(get(/databases/$(database)/documents/$(path)).data.userId);
    }
    
    // About page content: public read, admin write
    match /about/singleton {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // Contact form submissions: Write only for anyone. Admin read/delete.
    match /contacts/{contactId} {
        allow read, update, delete: if isAdmin();
        allow create: if true;
    }
  }
}

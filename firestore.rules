rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function isExistingUser(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function isAppAdmin() {
        return request.auth.uid in get(/databases/$(database)/documents/about/singleton).data.adminUids;
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Users Collection
    match /users/{userId} {
      // Anyone can read a user's public profile data for display
      allow read: if true;
      // Only the authenticated user can create or update their own profile
      allow write: if isUserAuthenticated() && request.auth.uid == userId;
    }

    // About Collection (Admins, Team Members, etc.)
    match /about/singleton {
      // Public content like story and team members is readable by anyone
      allow read: if true;
      // Only an admin can update the about page content (e.g., add other admins)
      allow write: if isUserAuthenticated() && isAppAdmin();
    }

    // Events Collection
    match /events/{eventId} {
      // Anyone can read approved events
      allow read: if resource.data.status == 'Approved' || (isUserAuthenticated() && (resource.data.submittedByUid == request.auth.uid || isAppAdmin()));
      // Authenticated users with an affiliation can create events
      allow create: if isUserAuthenticated() && getUserData(request.auth.uid).affiliation != null;
      // Only the event creator or an admin can update an event
      allow update: if isUserAuthenticated() && (resource.data.submittedByUid == request.auth.uid || isAppAdmin());
    }

    // Communities Collection
    match /communities/{communityId} {
      // Anyone can read community details
      allow read: if true;
      // Authenticated users without an affiliation can create a community
      allow create: if isUserAuthenticated() && getUserData(request.auth.uid).affiliation == null;
      // Only the community founder or an admin can update or delete
      allow update, delete: if isUserAuthenticated() && (resource.data.founderUid == request.auth.uid || isAppAdmin());
    }
    
    // Deals Collection
    match /deals/{dealId} {
      allow read: if true;
      allow create: if isUserAuthenticated() && getUserData(request.auth.uid).affiliation != null;
      allow update, delete: if isUserAuthenticated() && (resource.data.submittedByUid == request.auth.uid || isAppAdmin());
    }

    // Movies Collection (Read-only from client, managed externally/admin)
    match /movies/{movieId} {
        allow read: if true;
        allow write: if isUserAuthenticated() && isAppAdmin();
    }
    
    // Careers/Jobs Collection
    match /jobs/{jobId} {
        allow read: if true;
        allow create: if isUserAuthenticated() && getUserData(request.auth.uid).affiliation != null;
        allow update, delete: if isUserAuthenticated() && (resource.data.submittedByUid == request.auth.uid || isAppAdmin());
    }
    
    // Businesses Collection
    match /businesses/{businessId} {
        allow read: if true;
        allow create, update, delete: if isUserAuthenticated() && isAppAdmin();
    }
    
    // Sponsors Collection
    match /sponsors/{sponsorId} {
        allow read: if true;
        allow create, update, delete: if isUserAuthenticated() && isAppAdmin();
    }
    
    // Contact form submissions
    match /contacts/{contactId} {
        allow read: if isUserAuthenticated() && isAppAdmin();
        allow create: if true;
    }
  }
}

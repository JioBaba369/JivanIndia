
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['admin']);
    }
    
    // Helper function to check if user is a manager of a community
    function isCommunityManager(communityId) {
      let community = get(/databases/$(database)/documents/communities/$(communityId)).data;
      return request.auth.uid == community.founderUid ||
             (request.auth.uid in community.managers && community.managers[request.auth.uid].role in ['admin', 'moderator']);
    }

    // ==================================================================
    //  Users Collection
    // ==================================================================
    match /users/{userId} {
      // Allow user to read their own document completely
      // Allow anyone to read a limited set of public fields
      allow read: if request.auth.uid == userId ||
                     (resource.data.keys().hasAll(['username', 'name', 'bio', 'profileImageUrl', 'currentLocation', 'originLocation', 'affiliation', 'website', 'languagesSpoken', 'interests']));
      
      // Allow user to create their own document
      allow create: if request.auth.uid == userId;

      // Allow user to update their own document, but not change roles
      allow update: if request.auth.uid == userId &&
                       !('roles' in request.resource.data);
    }

    // ==================================================================
    //  About Collection
    // ==================================================================
    match /about/singleton {
       // Allow anyone to read the about page content
      allow read: if true;
      // Allow only admins (as defined in the document itself) to write
      allow write: if request.auth != null && request.auth.uid in resource.data.adminUids;
    }
    
    // ==================================================================
    //  Communities Collection
    // ==================================================================
    match /communities/{communityId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && isCommunityManager(communityId);
      allow delete: if request.auth != null && get(/databases/$(database)/documents/communities/$(communityId)).data.founderUid == request.auth.uid;
    }
    
    // ==================================================================
    //  Events Collection
    // ==================================================================
    match /events/{eventId} {
      allow read: if true;
      allow create: if request.auth != null && 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.affiliation != null;
      allow update: if request.auth != null && 
                       (isAdmin() || 
                        request.auth.uid == resource.data.submittedByUid ||
                        isCommunityManager(resource.data.organizerId));
      allow delete: if request.auth != null && (isAdmin() || request.auth.uid == resource.data.submittedByUid);
    }
    
    // ==================================================================
    //  Businesses Collection
    // ==================================================================
    match /businesses/{businessId} {
      allow read: if resource.data.isVerified == true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (isAdmin() || request.auth.uid == resource.data.ownerId);
      allow delete: if request.auth != null && (isAdmin() || request.auth.uid == resource.data.ownerId);
    }

    // ==================================================================
    //  Deals Collection
    // ==================================================================
    match /deals/{dealId} {
      allow read: if true;
      allow create: if request.auth != null && 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.affiliation != null;
      allow update, delete: if request.auth != null && (isAdmin() || request.auth.uid == resource.data.submittedByUid);
    }
    
    // ==================================================================
    //  Jobs Collection
    // ==================================================================
    match /jobs/{jobId} {
        allow read: if true;
        allow create: if request.auth != null && 
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.affiliation != null;
        allow update, delete: if request.auth != null && (isAdmin() || request.auth.uid == resource.data.submittedByUid);
    }

    // ==================================================================
    //  Movies Collection
    // ==================================================================
    match /movies/{movieId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    // ==================================================================
    //  Sponsors Collection
    // ==================================================================
    match /sponsors/{sponsorId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    // ==================================================================
    //  Reports Collection
    // ==================================================================
    match /reports/{reportId} {
      // Allow only admins to read reports
      allow read: if isAdmin();
      // Allow any authenticated user to create a report
      allow create: if request.auth != null;
      // Allow only admins to update the status of a report
      allow update: if isAdmin();
      allow delete: if false; // Reports should not be deleted
    }

    // ==================================================================
    //  Notifications Collection
    // ==================================================================
    match /notifications/{notificationId} {
      // User can only read, create, and update their own notifications
      allow read, update: if request.auth != null && request.auth.uid == resource.data.userId;
      // Creation is handled by backend functions/triggers, but this rule allows user-driven creation if ever needed.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow delete: if false; // Users should not delete notifications directly
    }

    // ==================================================================
    //  Contacts Collection (for contact form submissions)
    // ==================================================================
    match /contacts/{contactId} {
      allow read, delete: if isAdmin();
      allow create: if true; // Allow anyone to submit the contact form
      allow update: if false;
    }
  }
}


rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is an admin
    // This reads from the /about/singleton document where admin UIDs are stored
    function isAdmin() {
      return isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/about/singleton).data.adminUids;
    }

    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if a user is an affiliated manager of a community
    function isCommunityManager(communityId) {
        let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return isAuthenticated() && userDoc.affiliation != null && userDoc.affiliation.orgId == communityId;
    }

    // Publicly readable collections
    match /{collection}/{docId} where collection in ['events', 'communities', 'sponsors', 'movies', 'deals', 'jobs', 'festivals'] {
      allow read: if true;
      allow write: if isAdmin(); // Only admins can create/update/delete directly
    }

    // About page content is publicly readable, but only writable by admins
    match /about/singleton {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Users collection
    match /users/{userId} {
      // Anyone can read a user's public profile
      allow read: if true;
      
      // Only the user themselves or an admin can create or update their own profile
      allow create, update: if isOwner(userId) || isAdmin();
      
      // Deletion of user accounts should be handled carefully, maybe only by admins
      allow delete: if isAdmin();
    }
    
    // Notifications are private to each user
    match /notifications/{notificationId} {
      allow read, write: if isOwner(resource.data.userId);
      allow create: if isAuthenticated(); // Can be created by system/other users
    }
    
    // Contact submissions can be created by anyone
    match /contacts/{contactId} {
      allow create: if true;
      allow read, update, delete: if isAdmin(); // Only admins can manage submissions
    }
    
    // Reports can be created by any authenticated user
    match /reports/{reportId} {
        allow create: if isAuthenticated();
        allow read, update, delete: if isAdmin(); // Only admins can manage reports
    }
    
    // Specific rules for creating content through the app logic
    match /events/{eventId} {
      // Only an affiliated community manager can create an event
      allow create: if isCommunityManager(request.resource.data.organizerId);
    }
    
    match /deals/{dealId} {
      // Only an affiliated community manager can create a deal
      allow create: if isCommunityManager(request.resource.data.businessId);
    }
    
     match /jobs/{jobId} {
      // Only an affiliated community manager can create a job
      allow create: if isCommunityManager(request.resource.data.companyId);
    }

  }
}

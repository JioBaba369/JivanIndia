rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an admin
    function isAdmin() {
      return request.auth.token.admin == true;
    }

    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if a user is a community manager for a specific community
    function isCommunityManager(communityId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.affiliation.orgId == communityId;
    }
    
    // public read, authed write
    match /users/{userId} {
      allow read;
      allow create, update: if isOwner(userId);
    }
    
    // Admins can read/write everything. Logged in users can create. Public can read.
    match /communities/{communityId} {
      allow read;
      allow create: if request.auth != null;
      allow update, delete: if isAdmin() || isCommunityManager(communityId);
    }
    
    // Events: Public can read approved. Community managers can create. Admins can do anything.
    match /events/{eventId} {
      allow read: if resource.data.status == 'Approved';
      allow create: if request.auth != null && isCommunityManager(request.resource.data.organizerId);
      allow update: if isAdmin() || isCommunityManager(resource.data.organizerId);
      allow delete: if isAdmin();
    }
    
    // Public read-only collections
    match /businesses/{businessId} {
      allow read;
      allow create, update, delete: if isAdmin();
    }
    
    match /sponsors/{sponsorId} {
       allow read;
       allow create, update, delete: if isAdmin();
    }
    
    match /deals/{dealId} {
      allow read;
      allow create: if request.auth != null && isCommunityManager(request.resource.data.businessId);
      allow update, delete: if isAdmin() || isCommunityManager(resource.data.businessId);
    }
    
     match /jobs/{jobId} {
      allow read;
      allow create: if request.auth != null && isCommunityManager(request.resource.data.companyId);
      allow update, delete: if isAdmin() || isCommunityManager(resource.data.companyId);
    }
    
    match /movies/{movieId} {
      allow read;
      allow create, update, delete: if isAdmin();
    }
    
    // Reports can only be created by logged-in users and read/managed by admins
    match /reports/{reportId} {
      allow create: if request.auth != null;
      allow read, update, delete: if isAdmin();
    }
    
    // Notifications are private to each user
    match /notifications/{notificationId} {
      allow read, update: if isOwner(resource.data.userId);
      allow create: if request.auth != null; // Server-side logic must validate userId
    }

    // Site-wide content (about page, team members, admin list)
    match /about/singleton {
      allow read;
      allow update: if isAdmin();
    }
    
    // Contact form submissions can only be created. No one can read them from the client.
    match /contacts/{contactId} {
      allow create;
      allow read, update, delete: if false;
    }
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default: Deny all reads and writes to prevent unauthorized access to new collections.
    match /{document=**} {
      allow read, write: if false;
    }

    // Users can read their own data and update it. Public cannot read user profiles.
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      // Allow create for any new user signing up
      allow create: if request.auth != null;
    }

    // Communities can be read by anyone.
    // Creation is allowed for any authenticated user.
    // Updates are restricted to the original founder.
    match /communities/{communityId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth.uid == resource.data.founderUid;
    }
    
    // Events can be read by anyone.
    // Creation requires an authenticated user.
    // Updates are restricted to the user who submitted the event.
    match /events/{eventId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth.uid == resource.data.submittedByUid;
    }

    // Careers, Deals, Movies can be read by anyone.
    // Writes are disallowed for now to maintain data integrity until
    // a proper admin/submission process is defined.
    match /careers/{jobId} {
      allow read: if true;
      allow write: if false; // Or implement owner-based write rules
    }
    
    match /deals/{dealId} {
      allow read: if true;
      allow write: if false; // Or implement owner-based write rules
    }

    match /movies/{movieId} {
      allow read: if true;
      allow write: if false; // Or implement owner-based write rules
    }

    match /providers/{providerId} {
        allow read: if true;
        allow write: if false;
    }

    match /sponsors/{sponsorId} {
        allow read: if true;
        allow write: if false;
    }
  }
}
